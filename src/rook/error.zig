const std = @import("std");

pub const errno = enum(u16) {
    SUCCESS = 0,
    TOOBIG = 1,
    ACCES = 2,
    ADDRINUSE = 3,
    ADDRNOTAVAIL = 4,
    AFNOSUPPORT = 5,
    AGAIN = 6,
    ALREADY = 7,
    BADF = 8,
    BADMSG = 9,
    BUSY = 10,
    CANCELED = 11,
    CHILD = 12,
    CONNABORTED = 13,
    CONNREFUSED = 14,
    CONNRESET = 15,
    DEADLK = 16,
    DESTADDRREQ = 17,
    DOM = 18,
    DQUOT = 19,
    EXIST = 20,
    FAULT = 21,
    FBIG = 22,
    HOSTUNREACH = 23,
    IDRM = 24,
    ILSEQ = 25,
    INPROGRESS = 26,
    INTR = 27,
    INVAL = 28,
    IO = 29,
    ISCONN = 30,
    ISDIR = 31,
    LOOP = 32,
    MFILE = 33,
    MLINK = 34,
    MSGSIZE = 35,
    MULTIHOP = 36,
    NAMETOOLONG = 37,
    NETDOWN = 38,
    NETRESET = 39,
    NETUNREACH = 40,
    NFILE = 41,
    NOBUFS = 42,
    NODATA = 43,
    NODEV = 44,
    NOENT = 45,
    NOEXEC = 46,
    NOLCK = 47,
    NOLINK = 48,
    NOMEM = 49,
    NOMSG = 50,
    NOPROTOOPT = 51,
    NOSPC = 52,
    NOSR = 53,
    NOSTR = 54,
    NOSYS = 55,
    NOTCONN = 56,
    NOTDIR = 57,
    NOTEMPTY = 58,
    NOTRECOVERABLE = 59,
    NOTSOCK = 60,
    NOTSUP = 61,
    NOTTY = 62,
    NXIO = 63,
    OPNOTSUPP = 64,
    OVERFLOW = 65,
    OWNERDEAD = 66,
    PERM = 67,
    PIPE = 68,
    PROTO = 69,
    PROTONOSUPPORT = 70,
    PROTOTYPE = 71,
    RANGE = 72,
    ROFS = 73,
    SPIPE = 74,
    SRCH = 75,
    STALE = 76,
    TIME = 77,
    TIMEDOUT = 78,
    TXTBSY = 79,
    WOULDBLOCK = 80,
    XDEV = 81,
};

const longest_enum_field_size = blk: {
    comptime var len = 0;
    inline for (@typeInfo(errno).Enum.fields) |field| {
        if (field.name.len > len) len = field.name.len;
    }
    break :blk len;
};

pub fn panicUnexpectedErrno(err: errno) noreturn {
    const fmt = "Unexpected errno: {}";
    var panic_buf: [fmt.len - 2 + longest_enum_field_size]u8 = undefined;
    const msg = std.fmt.bufPrint(&panic_buf, fmt, .{err}) catch unreachable;
    @panic(msg);
}
